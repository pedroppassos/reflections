-> Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit
, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?

-> Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar 
vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?
-> Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?
-> De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?
-> Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

-> Git diff, diff -u, FC, Git checkout, git lot, git clone
-> Ls,Ls -a,cd
-> Git log -stat, git config --global color.ui auto
-> scp, which stands for "secure copy". 
The name was chosen because the scp command lets you securely copy a directory from one computer to another. 
-> Repository,commit,push,pull,merge

Warnings:
-> Não deve estar realizando um octopus
Octopus é uma estratégia que o Git usa para combinar muitas versões diferentes de código. 
Essa mensagem poderá aparecer se você tentar usar essa estratégia em uma situação inadequada.

-> Você está no estado de 'HEAD desanexado'
HEAD é o que o Git chama de commit no qual você está trabalhando. 
Você pode “desanexar” o HEAD alternando para um commit anterior, que veremos no próximo vídeo. 
Apesar do que parece, na verdade não é ruim desanexar o HEAD. 
O Git só avisa para que você possa perceber o que esta fazendo.

-> Pânico! (o 'impossível' aconteceu)
Essa é uma mensagem de erro real, mas não é só uma saída do Git. 
Em vez disso, trata-se de uma saída do GHC, o compilador de uma linguagem de programação chamada Haskell. 
Ela está reservada para erros particularmente surpreendentes!
